// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type KycStatus string

const (
	KycStatusPending    KycStatus = "pending"
	KycStatusProcessing KycStatus = "processing"
	KycStatusPassed     KycStatus = "passed"
	KycStatusFailed     KycStatus = "failed"
	KycStatusExpired    KycStatus = "expired"
)

func (e *KycStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KycStatus(s)
	case string:
		*e = KycStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for KycStatus: %T", src)
	}
	return nil
}

type NullKycStatus struct {
	KycStatus KycStatus `json:"kyc_status"`
	Valid     bool      `json:"valid"` // Valid is true if KycStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKycStatus) Scan(value interface{}) error {
	if value == nil {
		ns.KycStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KycStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKycStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KycStatus), nil
}

func (e KycStatus) Valid() bool {
	switch e {
	case KycStatusPending,
		KycStatusProcessing,
		KycStatusPassed,
		KycStatusFailed,
		KycStatusExpired:
		return true
	}
	return false
}

func AllKycStatusValues() []KycStatus {
	return []KycStatus{
		KycStatusPending,
		KycStatusProcessing,
		KycStatusPassed,
		KycStatusFailed,
		KycStatusExpired,
	}
}

type AuditLog struct {
	ID     int64     `db:"id" json:"id"`
	Actor  string    `db:"actor" json:"actor"`
	Action string    `db:"action" json:"action"`
	Obj    string    `db:"obj" json:"obj"`
	Meta   []byte    `db:"meta" json:"meta"`
	Ts     time.Time `db:"ts" json:"ts"`
}

type Credential struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	SubjectDid  string      `db:"subject_did" json:"subject_did"`
	IssuerDid   string      `db:"issuer_did" json:"issuer_did"`
	VcHash      []byte      `db:"vc_hash" json:"vc_hash"`
	VcJws       []byte      `db:"vc_jws" json:"vc_jws"`
	Type        []string    `db:"type" json:"type"`
	IssuedAt    time.Time   `db:"issued_at" json:"issued_at"`
	ExpiresAt   *time.Time  `db:"expires_at" json:"expires_at"`
	Revoked     bool        `db:"revoked" json:"revoked"`
	RevokedAt   *time.Time  `db:"revoked_at" json:"revoked_at"`
	AnchorChain pgtype.Text `db:"anchor_chain" json:"anchor_chain"`
	AnchorTx    pgtype.Text `db:"anchor_tx" json:"anchor_tx"`
	CreatedAt   time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time   `db:"updated_at" json:"updated_at"`
}

type KycJob struct {
	ID         pgtype.UUID    `db:"id" json:"id"`
	UserID     pgtype.UUID    `db:"user_id" json:"user_id"`
	Status     KycStatus      `db:"status" json:"status"`
	Score      pgtype.Numeric `db:"score" json:"score"`
	Liveness   pgtype.Bool    `db:"liveness" json:"liveness"`
	DocValid   pgtype.Bool    `db:"doc_valid" json:"doc_valid"`
	ResultJson []byte         `db:"result_json" json:"result_json"`
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time      `db:"updated_at" json:"updated_at"`
}

type Revocation struct {
	VcHash    []byte     `db:"vc_hash" json:"vc_hash"`
	Reason    string     `db:"reason" json:"reason"`
	RevokedAt *time.Time `db:"revoked_at" json:"revoked_at"`
}

type User struct {
	ID         pgtype.UUID    `db:"id" json:"id"`
	Did        string         `db:"did" json:"did"`
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	LastSeenAt *time.Time     `db:"last_seen_at" json:"last_seen_at"`
	RiskScore  pgtype.Numeric `db:"risk_score" json:"risk_score"`
}
